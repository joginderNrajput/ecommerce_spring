plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'idea'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'com.learning'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
		mavenContent {
			snapshotsOnly()
		}
	}
}

ext {
	grpcVersion = '1.56.0'  // Use 1.56.0 to match grpc-client starter 2.15.0
	protobufVersion = '3.25.1'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'io.github.cdimascio:dotenv-java:3.2.0'

	//Retrofit
	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

	implementation 'net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE'
	implementation 'net.devh:grpc-client-spring-boot-starter:2.15.0.RELEASE'

	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"

	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
	implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

	compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all().each { task ->
			task.plugins {
				grpc {}
			}
		}
	}
}

sourceSets {
	main {
		java {
			srcDirs += "$projectDir/build/generated/source/proto/main/java"
			srcDirs += "$projectDir/build/generated/source/proto/main/grpc"
		}
	}
}

tasks.withType(Test).configureEach {
	enabled = false
}
